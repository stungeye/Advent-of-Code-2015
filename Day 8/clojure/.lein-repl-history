(defn file->strings [filename]
  (clojure.string/split (slurp filename) #"\r\n"))
(def test-strings (characters/file->strings "test_strings.txt"))
(def test-strings (file->strings "test_strings.txt"))
(identity test-strings)
(clojure.string/replace (test-strings 1) #"\\\"" "")
(clojure.string/replace (test-strings 1) #"\"" "")
(clojure.string/replace (test-strings 2) #"\"" "")
(clojure.string/replace (test-strings 2) #"\\" "")
(clojure.string/replace (test-strings 1) #"\"" "")
(clojure.string/replace (test-strings 2) #"\\" "")
(clojure.string/replace (test-strings 2) #"\"" "")
(def test (clojure.string/replace (test-strings 2) #"\"" ""))
(def test-it (clojure.string/replace (test-strings 2) #"\"" ""))
(clojure.string/replace test-it #"\"" "")
(clojure.string/replace test-it #"\\" "")
(clojure.string/replace (test-strings 2) #"\\\"" "")
(-> (test-strings 2)
  (clojure.string/replace #"\\\"" "")
  (clojure.string/replace #"\"" ""))
(clojure.string/replace (test-strings 3) #"\\x.." "")
(clojure.string/replace (test-strings 3) #"\\x.." "_")
(defn in-memory-count [string]
  (-> string
      (clojure.string/replace #"\\\"" "_")
      (clojure.string/replace #"\\x.." "_")
      (clojure.string/replace #"\"" "")
      count))
(in-memory-count (test-strings 1))
(in-memory-count (test-strings 0))
(in-memory-count (test-strings 2))
(in-memory-count (test-strings 3))
(defn file->strings [filename]
  (clojure.string/split (slurp filename) #"\r\n"))
(defn in-memory-count [string]
  (-> string
      (clojure.string/replace #"\\\"" "_")
      (clojure.string/replace #"\\x.." "_")
      (clojure.string/replace #"\"" "")
      count))
(defn char-count-diff [string]
  (- (count string) (in-memory-count string)))
(defn char-count-diff-collection [strings]
  (reduce + char-count-diff strings))
(characters/char-count-diff-collection test-strings)
(char-count-diff-collection test-strings)
(defn char-count-diff-collection [strings]
  (reduce + (map char-count-diff strings)))
(char-count-diff-collection test-strings)
(char-count-diff "\"byc\x9dyxuafof\\\xa6uf\\axfozomj\\olh\x6a\"")
(defn replacer [string]
(-> string
      (clojure.string/replace #"\\x.." "_")
      (clojure.string/replace #"\\\"" "_")
      (clojure.string/replace #"\\\\" "_")
      (clojure.string/replace #"\"" ""))
)
(replacer (test-strings 0))
(def test-strings (file->strings "test_strings.txt"))
(replacer (test-strings 0))
(replacer (test-strings 1))
(replacer (test-strings 2))
(replacer (test-strings 3))
(replacer (test-strings 4))
(def test-strings (file->strings "strings.txt"))
(replacer (test-strings 0))
(replacer (test-strings 1))
(replacer (test-strings 2))
(replacer (test-strings 3))
(replacer (test-strings 4))
(replacer (test-strings 5))
(replacer (test-strings 6))
(replacer (test-strings 7))
(replacer (test-strings 8))
(replacer (test-strings 9))
(replacer (test-strings 10))
(replacer (test-strings 11))
(replacer (test-strings 12))
(replacer (test-strings 13))
(replacer (test-strings 14))
(pprint (map replacer test-strings))
(defn replacer [string]
  (-> string
      (clojure.string/replace #"\\\"" "_")
      (clojure.string/replace #"\\\\" "_")
      (clojure.string/replace #"\\x.." "_")
      (clojure.string/replace #"\"" "")
)
(pprint (map replacer test-strings))
(test-strings 284)
(def phase-1 ( (clojure.string/replace (test-strings 284) #"\\\"" "_")))
(def phase-1 (clojure.string/replace (test-strings 284) #"\\\"" "_"))
(identity phase-2)
(identity phase-1)
(test-string 2)
(test-strings 2)
(test-strings 1)
(test-strings 3)
(clojure-replace (test-strings 3) #
(clojure-replace (test-strings 3) #"^\"(.*)\"$" "$1")
(clojure.strimg/replace (test-strings 3) #"^\"(.*)\"$" "$1")
(clojure.string/replace (test-strings 3) #"^\"(.*)\"$" "$1")
(defn replacer [string]
  (-> string
      (clojure.string/replace #"^\"(.*)\"$" "$1")
      (clojure.string/replace #"\\\"" "_")
      (clojure.string/replace #"\\\\" "_")
      (clojure.string/replace #"\\x.." "_")))
(pprint (map replacer test-strings))
(pprint (map count (map replacer test-strings)))
(def output (file->strings "output.txt"))
(pprint (map count output))
(pprint output)
(file->strings "strings.txt")
(file->strings "output.txt")
(file->strings "strings.txt")
(file->strings "output.txt")
(slurp "output.txt")
(clojure.string/split (slurp "output.txt") #
(clojure.string/split (slurp "output.txt") #"\n")
(def output (clojure.string/split (slurp "output.txt") #"\n"))
(pprint (map count output))
(pprint (map count test-strings))
(pprint (map count (map replacer test-strings)))
(def output (clojure.string/split (slurp "output.txt") #"\n"))
(identity output)
(map replacer test-strings)
(diff (map replacer test-strings) output)
(clojure.data/diff (map replacer test-strings) output)
(use 'clojure.data)
(diff (map replacer test-strings) output)
(map #(str %1 %2) (map replacer test-strings) output)
(pprint (map #(str %1 " " %2) (map replacer test-strings) output))
(pprint (map #(str %1 " " %2 (count %1) (count %2)) (map replacer test-strings) output))
(pprint (map #(str %1 " " %2 " " ( - (count %1) (count %2))) (map replacer test-strings) output))
(pprint (map #( - (count %1) (count %2)) (map replacer test-strings) output))
