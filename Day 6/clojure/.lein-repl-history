exit
(for [x (range 3 6) y (range 2 4)] [x y])
(for [x (range 0 2) y (range 0 2)] [x y])
(for [x (range 0 3) y (range 0 3)] [x y])
exit
(use 'clojure.set)
(clojure.set/different #{1 2 3} #{2})
(clojure.set/difference #{1 2 3} #{2})
(clojure.set/difference #{1 2 3} #{2 4 5 6})
(clojure.set/difference #{1 2 3 4} #{3 4 5 6})
(clojure.set/difference #{3 4 5 6} #{1 2 3 4})
exit
(def x-range (range 0 2))
(def x-range (range 0 3))
(def y-range (range 0 3))
(def to-toggle (into #{} (for [x x-range y y-range] [x y])))
(identity to-toggle)
(use 'clojure.set)
(clojure.set/different to-toggle #{})
(clojure.set/difference to-toggle #{})
(def switch-on (clojure.set/difference to-toggle #{}))
(clojure.set/different to-toggle switch-on)
(clojure.set/difference to-toggle switch-on)
(def switch-off (clojure.set/difference to-toggle switch-on))
(clojure.set/join switch-on #{})
(identity switch-on )
exit
(defn apply-light-commands [commands]
  (reduce
    (fn [lights command]
      next-light-set lights command)
    #{}
    commands))
(defn apply-light-commands [commands]
  (reduce
    (fn [lights command]
      conj lights (first command))
    #{}
    commands))
(apply-light-commands [[1 2 3 4]])
(reduce (fn [a b] (conj a b)) #{} [1 2 3 4])
(defn apply-light-commands [commands]
  (reduce
    (fn [lights command]
      (conj lights command))
     #{}
     commands))
(apply-light-commands [[1 2 3 4]])
exit
(require 'decorations.clj)
(require 'decorations)
(decorations/apply-light-commands (decorations/tokenize-file "test_commands.txt"))
(time (decorations/apply-light-commands (decorations/tokenize-file "commands.txt")))
(time (decorations/apply-light-commands-recur (decorations/tokenize-file "commands.txt")))
(time (decorations/apply-light-commands-recur (decorations/tokenize-file "test_commands.txt")))
(time (decorations/apply-light-commands (decorations/tokenize-file "test_commands.txt")))
(time (decorations/tokenize-file "commands.txt"))
exit
